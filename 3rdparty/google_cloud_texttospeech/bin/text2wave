#!/usr/bin/env python

import argparse
from distutils.version import LooseVersion
import hashlib
import os
import shutil
import sys

from google.cloud.texttospeech import TextToSpeechClient
import pkg_resources
import rospy


# The submodules enums and types have been removed from v2.0.0
# https://github.com/googleapis/python-texttospeech/blob/master/UPGRADING.md#enums-and-types  # NOQA
texttospeech_version = pkg_resources.get_distribution(
    "google-cloud-texttospeech").version
if LooseVersion(texttospeech_version) >= LooseVersion('2.0.0'):
    from google.cloud.texttospeech import AudioConfig
    from google.cloud.texttospeech import AudioEncoding
    from google.cloud.texttospeech import SsmlVoiceGender
    from google.cloud.texttospeech import SynthesisInput
    from google.cloud.texttospeech import VoiceSelectionParams
else:
    import google.cloud.texttospeech
    AudioEncoding = google.cloud.texttospeech.enums.AudioEncoding
    SsmlVoiceGender = google.cloud.texttospeech.enums.SsmlVoiceGender
    AudioConfig = google.cloud.texttospeech.types.AudioConfig
    SynthesisInput = google.cloud.texttospeech.types.SynthesisInput
    VoiceSelectionParams = google.cloud.texttospeech.types.VoiceSelectionParams

cache_enabled = os.environ.get(
    'GOOGLE_CLOUD_TEXTTOSPEECH_CACHE_ENABLED', True)
cache_enabled = cache_enabled is True \
    or cache_enabled == 'true'  # for launch env tag.


def get_cache_dir():
    """Return cache dir.

    Returns
    -------
    cache_dir : str
        cache directory.
    """
    ros_home = os.getenv('ROS_HOME', os.path.expanduser('~/.ros'))
    pkg_ros_home = os.path.join(ros_home, 'google_cloud_texttospeech')
    default_cache_dir = os.path.join(pkg_ros_home, 'cache')
    cache_dir = os.environ.get(
        'GOOGLE_CLOUD_TEXTTOSPEECH_CACHE_DIR',
        default_cache_dir)
    if not os.path.exists(cache_dir):
        os.makedirs(cache_dir)
    return cache_dir


def checksum_md5(filename, blocksize=8192):
    """Calculate md5sum.

    Parameters
    ----------
    filename : str or pathlib.Path
        input filename.
    blocksize : int
        MD5 has 128-byte digest blocks (default: 8192 is 128x64).

    Returns
    -------
    md5 : str
        calculated md5sum.
    """
    filename = str(filename)
    hash_factory = hashlib.md5()
    with open(filename, 'rb') as f:
        for chunk in iter(lambda: f.read(blocksize), b''):
            hash_factory.update(chunk)
    return hash_factory.hexdigest()


voice_name_to_language_code = {
    'af-ZA-Standard-A': 'af-ZA',
    'ar-XA-Standard-A': 'ar-XA',
    'ar-XA-Standard-B': 'ar-XA',
    'ar-XA-Standard-C': 'ar-XA',
    'ar-XA-Standard-D': 'ar-XA',
    'ar-XA-Wavenet-A': 'ar-XA',
    'ar-XA-Wavenet-B': 'ar-XA',
    'ar-XA-Wavenet-C': 'ar-XA',
    'ar-XA-Wavenet-D': 'ar-XA',
    'bn-IN-Standard-A': 'bn-IN',
    'bn-IN-Standard-B': 'bn-IN',
    'bn-IN-Wavenet-A': 'bn-IN',
    'bn-IN-Wavenet-B': 'bn-IN',
    'bg-bg-Standard-A': 'bg-BG',
    'ca-es-Standard-A': 'ca-ES',
    'yue-HK-Standard-A': 'yue-HK',
    'yue-HK-Standard-B': 'yue-HK',
    'yue-HK-Standard-C': 'yue-HK',
    'yue-HK-Standard-D': 'yue-HK',
    'cs-CZ-Standard-A': 'cs-CZ',
    'cs-CZ-Wavenet-A': 'cs-CZ',
    'da-DK-Standard-A': 'da-DK',
    'da-DK-Standard-C': 'da-DK',
    'da-DK-Standard-D': 'da-DK',
    'da-DK-Standard-E': 'da-DK',
    'da-DK-Wavenet-A': 'da-DK',
    'da-DK-Wavenet-C': 'da-DK',
    'da-DK-Wavenet-D': 'da-DK',
    'da-DK-Wavenet-E': 'da-DK',
    'nl-BE-Standard-A': 'nl-BE',
    'nl-BE-Standard-B': 'nl-BE',
    'nl-BE-Wavenet-A': 'nl-BE',
    'nl-BE-Wavenet-B': 'nl-BE',
    'nl-NL-Standard-A': 'nl-NL',
    'nl-NL-Standard-B': 'nl-NL',
    'nl-NL-Standard-C': 'nl-NL',
    'nl-NL-Standard-D': 'nl-NL',
    'nl-NL-Standard-E': 'nl-NL',
    'nl-NL-Wavenet-A': 'nl-NL',
    'nl-NL-Wavenet-B': 'nl-NL',
    'nl-NL-Wavenet-C': 'nl-NL',
    'nl-NL-Wavenet-D': 'nl-NL',
    'nl-NL-Wavenet-E': 'nl-NL',
    'en-AU-Standard-A': 'en-AU',
    'en-AU-Standard-B': 'en-AU',
    'en-AU-Standard-C': 'en-AU',
    'en-AU-Standard-D': 'en-AU',
    'en-AU-Wavenet-A': 'en-AU',
    'en-AU-Wavenet-B': 'en-AU',
    'en-AU-Wavenet-C': 'en-AU',
    'en-AU-Wavenet-D': 'en-AU',
    'en-IN-Standard-A': 'en-IN',
    'en-IN-Standard-B': 'en-IN',
    'en-IN-Standard-C': 'en-IN',
    'en-IN-Standard-D': 'en-IN',
    'en-IN-Wavenet-A': 'en-IN',
    'en-IN-Wavenet-B': 'en-IN',
    'en-IN-Wavenet-C': 'en-IN',
    'en-IN-Wavenet-D': 'en-IN',
    'en-GB-Standard-A': 'en-GB',
    'en-GB-Standard-B': 'en-GB',
    'en-GB-Standard-C': 'en-GB',
    'en-GB-Standard-D': 'en-GB',
    'en-GB-Standard-F': 'en-GB',
    'en-GB-Wavenet-A': 'en-GB',
    'en-GB-Wavenet-B': 'en-GB',
    'en-GB-Wavenet-C': 'en-GB',
    'en-GB-Wavenet-D': 'en-GB',
    'en-GB-Wavenet-F': 'en-GB',
    'en-US-Standard-A': 'en-US',
    'en-US-Standard-B': 'en-US',
    'en-US-Standard-C': 'en-US',
    'en-US-Standard-D': 'en-US',
    'en-US-Standard-E': 'en-US',
    'en-US-Standard-F': 'en-US',
    'en-US-Standard-G': 'en-US',
    'en-US-Standard-H': 'en-US',
    'en-US-Standard-I': 'en-US',
    'en-US-Standard-J': 'en-US',
    'en-US-Wavenet-A': 'en-US',
    'en-US-Wavenet-B': 'en-US',
    'en-US-Wavenet-C': 'en-US',
    'en-US-Wavenet-D': 'en-US',
    'en-US-Wavenet-E': 'en-US',
    'en-US-Wavenet-F': 'en-US',
    'en-US-Wavenet-G': 'en-US',
    'en-US-Wavenet-H': 'en-US',
    'en-US-Wavenet-I': 'en-US',
    'en-US-Wavenet-J': 'en-US',
    'fil-PH-Standard-A': 'fil-PH',
    'fil-PH-Standard-B': 'fil-PH',
    'fil-PH-Standard-C': 'fil-PH',
    'fil-PH-Standard-D': 'fil-PH',
    'fil-PH-Wavenet-A': 'fil-PH',
    'fil-PH-Wavenet-B': 'fil-PH',
    'fil-PH-Wavenet-C': 'fil-PH',
    'fil-PH-Wavenet-D': 'fil-PH',
    'fi-FI-Standard-A': 'fi-FI',
    'fi-FI-Wavenet-A': 'fi-FI',
    'fr-CA-Standard-A': 'fr-CA',
    'fr-CA-Standard-B': 'fr-CA',
    'fr-CA-Standard-C': 'fr-CA',
    'fr-CA-Standard-D': 'fr-CA',
    'fr-CA-Wavenet-A': 'fr-CA',
    'fr-CA-Wavenet-B': 'fr-CA',
    'fr-CA-Wavenet-C': 'fr-CA',
    'fr-CA-Wavenet-D': 'fr-CA',
    'fr-FR-Standard-A': 'fr-FR',
    'fr-FR-Standard-B': 'fr-FR',
    'fr-FR-Standard-C': 'fr-FR',
    'fr-FR-Standard-D': 'fr-FR',
    'fr-FR-Standard-E': 'fr-FR',
    'fr-FR-Wavenet-A': 'fr-FR',
    'fr-FR-Wavenet-B': 'fr-FR',
    'fr-FR-Wavenet-C': 'fr-FR',
    'fr-FR-Wavenet-D': 'fr-FR',
    'fr-FR-Wavenet-E': 'fr-FR',
    'de-DE-Standard-A': 'de-DE',
    'de-DE-Standard-B': 'de-DE',
    'de-DE-Standard-C': 'de-DE',
    'de-DE-Standard-D': 'de-DE',
    'de-DE-Standard-E': 'de-DE',
    'de-DE-Standard-F': 'de-DE',
    'de-DE-Wavenet-A': 'de-DE',
    'de-DE-Wavenet-B': 'de-DE',
    'de-DE-Wavenet-C': 'de-DE',
    'de-DE-Wavenet-D': 'de-DE',
    'de-DE-Wavenet-E': 'de-DE',
    'de-DE-Wavenet-F': 'de-DE',
    'el-GR-Standard-A': 'el-GR',
    'el-GR-Wavenet-A': 'el-GR',
    'gu-IN-Standard-A': 'gu-IN',
    'gu-IN-Standard-B': 'gu-IN',
    'gu-IN-Wavenet-A': 'gu-IN',
    'gu-IN-Wavenet-B': 'gu-IN',
    'hi-IN-Standard-A': 'hi-IN',
    'hi-IN-Standard-B': 'hi-IN',
    'hi-IN-Standard-C': 'hi-IN',
    'hi-IN-Standard-D': 'hi-IN',
    'hi-IN-Wavenet-A': 'hi-IN',
    'hi-IN-Wavenet-B': 'hi-IN',
    'hi-IN-Wavenet-C': 'hi-IN',
    'hi-IN-Wavenet-D': 'hi-IN',
    'hu-HU-Standard-A': 'hu-HU',
    'hu-HU-Wavenet-A': 'hu-HU',
    'is-is-Standard-A': 'is-IS',
    'id-ID-Standard-A': 'id-ID',
    'id-ID-Standard-B': 'id-ID',
    'id-ID-Standard-C': 'id-ID',
    'id-ID-Standard-D': 'id-ID',
    'id-ID-Wavenet-A': 'id-ID',
    'id-ID-Wavenet-B': 'id-ID',
    'id-ID-Wavenet-C': 'id-ID',
    'id-ID-Wavenet-D': 'id-ID',
    'it-IT-Standard-A': 'it-IT',
    'it-IT-Standard-B': 'it-IT',
    'it-IT-Standard-C': 'it-IT',
    'it-IT-Standard-D': 'it-IT',
    'it-IT-Wavenet-A': 'it-IT',
    'it-IT-Wavenet-B': 'it-IT',
    'it-IT-Wavenet-C': 'it-IT',
    'it-IT-Wavenet-D': 'it-IT',
    'ja-JP-Standard-A': 'ja-JP',
    'ja-JP-Standard-B': 'ja-JP',
    'ja-JP-Standard-C': 'ja-JP',
    'ja-JP-Standard-D': 'ja-JP',
    'ja-JP-Wavenet-A': 'ja-JP',
    'ja-JP-Wavenet-B': 'ja-JP',
    'ja-JP-Wavenet-C': 'ja-JP',
    'ja-JP-Wavenet-D': 'ja-JP',
    'kn-IN-Standard-A': 'kn-IN',
    'kn-IN-Standard-B': 'kn-IN',
    'kn-IN-Wavenet-A': 'kn-IN',
    'kn-IN-Wavenet-B': 'kn-IN',
    'ko-KR-Standard-A': 'ko-KR',
    'ko-KR-Standard-B': 'ko-KR',
    'ko-KR-Standard-C': 'ko-KR',
    'ko-KR-Standard-D': 'ko-KR',
    'ko-KR-Wavenet-A': 'ko-KR',
    'ko-KR-Wavenet-B': 'ko-KR',
    'ko-KR-Wavenet-C': 'ko-KR',
    'ko-KR-Wavenet-D': 'ko-KR',
    'lv-lv-Standard-A': 'lv-LV',
    'ms-MY-Wavenet-A': 'ms-MY',
    'ms-MY-Wavenet-B': 'ms-MY',
    'ms-MY-Wavenet-C': 'ms-MY',
    'ms-MY-Wavenet-D': 'ms-MY',
    'ml-IN-Standard-A': 'ml-IN',
    'ml-IN-Standard-B': 'ml-IN',
    'ml-IN-Wavenet-A': 'ml-IN',
    'ml-IN-Wavenet-B': 'ml-IN',
    'cmn-CN-Standard-A': 'cmn-CN',
    'cmn-CN-Standard-B': 'cmn-CN',
    'cmn-CN-Standard-C': 'cmn-CN',
    'cmn-CN-Standard-D': 'cmn-CN',
    'cmn-CN-Wavenet-A': 'cmn-CN',
    'cmn-CN-Wavenet-B': 'cmn-CN',
    'cmn-CN-Wavenet-C': 'cmn-CN',
    'cmn-CN-Wavenet-D': 'cmn-CN',
    'cmn-TW-Standard-A': 'cmn-TW',
    'cmn-TW-Standard-B': 'cmn-TW',
    'cmn-TW-Standard-C': 'cmn-TW',
    'cmn-TW-Wavenet-A': 'cmn-TW',
    'cmn-TW-Wavenet-B': 'cmn-TW',
    'cmn-TW-Wavenet-C': 'cmn-TW',
    'nb-NO-Standard-A': 'nb-NO',
    'nb-NO-Standard-B': 'nb-NO',
    'nb-NO-Standard-C': 'nb-NO',
    'nb-NO-Standard-D': 'nb-NO',
    'nb-NO-Wavenet-A': 'nb-NO',
    'nb-NO-Wavenet-B': 'nb-NO',
    'nb-NO-Wavenet-C': 'nb-NO',
    'nb-NO-Wavenet-D': 'nb-NO',
    'nb-no-Standard-E': 'nb-NO',
    'nb-no-Wavenet-E': 'nb-NO',
    'pl-PL-Standard-A': 'pl-PL',
    'pl-PL-Standard-B': 'pl-PL',
    'pl-PL-Standard-C': 'pl-PL',
    'pl-PL-Standard-D': 'pl-PL',
    'pl-PL-Standard-E': 'pl-PL',
    'pl-PL-Wavenet-A': 'pl-PL',
    'pl-PL-Wavenet-B': 'pl-PL',
    'pl-PL-Wavenet-C': 'pl-PL',
    'pl-PL-Wavenet-D': 'pl-PL',
    'pl-PL-Wavenet-E': 'pl-PL',
    'pt-BR-Standard-A': 'pt-BR',
    'pt-BR-Wavenet-A': 'pt-BR',
    'pt-PT-Standard-A': 'pt-PT',
    'pt-PT-Standard-B': 'pt-PT',
    'pt-PT-Standard-C': 'pt-PT',
    'pt-PT-Standard-D': 'pt-PT',
    'pt-PT-Wavenet-A': 'pt-PT',
    'pt-PT-Wavenet-B': 'pt-PT',
    'pt-PT-Wavenet-C': 'pt-PT',
    'pt-PT-Wavenet-D': 'pt-PT',
    'ro-RO-Standard-A': 'ro-RO',
    'ro-RO-Wavenet-A': 'ro-RO',
    'ru-RU-Standard-A': 'ru-RU',
    'ru-RU-Standard-B': 'ru-RU',
    'ru-RU-Standard-C': 'ru-RU',
    'ru-RU-Standard-D': 'ru-RU',
    'ru-RU-Standard-E': 'ru-RU',
    'ru-RU-Wavenet-A': 'ru-RU',
    'ru-RU-Wavenet-B': 'ru-RU',
    'ru-RU-Wavenet-C': 'ru-RU',
    'ru-RU-Wavenet-D': 'ru-RU',
    'ru-RU-Wavenet-E': 'ru-RU',
    'sr-rs-Standard-A': 'sr-RS',
    'sk-SK-Standard-A': 'sk-SK',
    'sk-SK-Wavenet-A': 'sk-SK',
    'es-ES-Standard-A': 'es-ES',
    'es-ES-Standard-B': 'es-ES',
    'es-ES-Standard-C': 'es-ES',
    'es-ES-Standard-D': 'es-ES',
    'es-ES-Wavenet-B': 'es-ES',
    'es-ES-Wavenet-C': 'es-ES',
    'es-ES-Wavenet-D': 'es-ES',
    'es-US-Standard-A': 'es-US',
    'es-US-Standard-B': 'es-US',
    'es-US-Standard-C': 'es-US',
    'es-US-Wavenet-A': 'es-US',
    'es-US-Wavenet-B': 'es-US',
    'es-US-Wavenet-C': 'es-US',
    'sv-SE-Standard-A': 'sv-SE',
    'sv-SE-Wavenet-A': 'sv-SE',
    'ta-IN-Standard-A': 'ta-IN',
    'ta-IN-Standard-B': 'ta-IN',
    'ta-IN-Wavenet-A': 'ta-IN',
    'ta-IN-Wavenet-B': 'ta-IN',
    'te-IN-Standard-A': 'te-IN',
    'te-IN-Standard-B': 'te-IN',
    'th-TH-Standard-A': 'th-TH',
    'tr-TR-Standard-A': 'tr-TR',
    'tr-TR-Standard-B': 'tr-TR',
    'tr-TR-Standard-C': 'tr-TR',
    'tr-TR-Standard-D': 'tr-TR',
    'tr-TR-Standard-E': 'tr-TR',
    'tr-TR-Wavenet-A': 'tr-TR',
    'tr-TR-Wavenet-B': 'tr-TR',
    'tr-TR-Wavenet-C': 'tr-TR',
    'tr-TR-Wavenet-D': 'tr-TR',
    'tr-TR-Wavenet-E': 'tr-TR',
    'uk-UA-Standard-A': 'uk-UA',
    'uk-UA-Wavenet-A': 'uk-UA',
    'vi-VN-Standard-A': 'vi-VN',
    'vi-VN-Standard-B': 'vi-VN',
    'vi-VN-Standard-C': 'vi-VN',
    'vi-VN-Standard-D': 'vi-VN',
    'vi-VN-Wavenet-A': 'vi-VN',
    'vi-VN-Wavenet-B': 'vi-VN',
    'vi-VN-Wavenet-C': 'vi-VN',
    'vi-VN-Wavenet-D': 'vi-VN',
}
lower2original = {k.lower(): k
                  for k in voice_name_to_language_code}


if __name__ == '__main__':
    speaking_rate = rospy.get_param('~speaking_rate', 1.0)
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('-eval', '--evaluate')
    parser.add_argument('-o', '--output')
    parser.add_argument('text')
    args = parser.parse_args()

    # Instantiates a client
    client = TextToSpeechClient()

    with open(args.text, 'rb') as f:
        speach_text = f.readline()
    synthesis_input = SynthesisInput(
        text=speach_text)

    # English as default
    language_code = 'en-US'
    name = 'en-US-Wavenet-A'
    # You can see which language is available here
    # https://cloud.google.com/text-to-speech/docs/voices
    voice_name = args.evaluate.lstrip('(').rstrip(')').lower()
    if args.evaluate in ['(ja)', '(ja-JP)']:
        # for Japanese
        language_code = 'ja-JP'
        name = 'ja-JP-Wavenet-A'

    if cache_enabled:
        cache_dir = get_cache_dir()
        md5 = checksum_md5(args.text)
        cache_filename = os.path.join(
            cache_dir,
            '--'.join([md5, language_code, name, str(speaking_rate)])
            + '.mp3')
        if os.path.exists(cache_filename):
            print('[Text2Wave] Using cached sound file ({}) for {}'
                  .format(cache_filename, speach_text.decode('utf-8')))
            shutil.copy(cache_filename, args.output)
            sys.exit(0)

    elif voice_name in lower2original:
        name = lower2original[voice_name]
        language_code = voice_name_to_language_code[name]

    voice = VoiceSelectionParams(
        language_code=language_code,
        name=name,
        ssml_gender=SsmlVoiceGender.FEMALE)

    # Select the type of audio file you want returned
    audio_config = AudioConfig(
        audio_encoding=AudioEncoding.MP3,
        speaking_rate=speaking_rate)
    if LooseVersion(texttospeech_version) >= LooseVersion('2.0.0'):
        response = client.synthesize_speech(
            input=synthesis_input,
            voice=voice,
            audio_config=audio_config)
    else:
        response = client.synthesize_speech(
            synthesis_input, voice, audio_config)
    with open(args.output, 'wb') as out:
        # Write the response to the output file.
        out.write(response.audio_content)
    if cache_enabled:
        shutil.copy(args.output, cache_filename)
