#!/usr/bin/env python

import argparse
from distutils.version import LooseVersion

from google.cloud.texttospeech import TextToSpeechClient
import pkg_resources
import rospy


# The submodules enums and types have been removed from v2.0.0
# https://github.com/googleapis/python-texttospeech/blob/master/UPGRADING.md#enums-and-types  # NOQA
texttospeech_version = pkg_resources.get_distribution(
    "google-cloud-texttospeech").version
if LooseVersion(texttospeech_version) >= LooseVersion('2.0.0'):
    from google.cloud.texttospeech import AudioConfig
    from google.cloud.texttospeech import AudioEncoding
    from google.cloud.texttospeech import SsmlVoiceGender
    from google.cloud.texttospeech import SynthesisInput
    from google.cloud.texttospeech import VoiceSelectionParams
else:
    import google.cloud.texttospeech
    AudioEncoding = google.cloud.texttospeech.enums.AudioEncoding
    SsmlVoiceGender = google.cloud.texttospeech.enums.SsmlVoiceGender
    AudioConfig = google.cloud.texttospeech.types.AudioConfig
    SynthesisInput = google.cloud.texttospeech.types.SynthesisInput
    VoiceSelectionParams = google.cloud.texttospeech.types.VoiceSelectionParams


if __name__ == '__main__':
    speaking_rate = rospy.get_param('~speaking_rate', 1.0)
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('-eval', '--evaluate')
    parser.add_argument('-o', '--output')
    parser.add_argument('text')
    args = parser.parse_args()

    # Instantiates a client
    client = TextToSpeechClient()
    with open(args.text, 'rb') as f:
        synthesis_input = SynthesisInput(
            text=f.readline())

    # English as default
    language_code = 'en-US'
    name = 'en-US-Wavenet-A'
    # You can see which language is available here
    # https://cloud.google.com/text-to-speech/docs/voices
    # Japanese
    if args.evaluate in ['(ja)', '(ja-JP)']:
        language_code = 'ja-JP'
        name = 'ja-JP-Wavenet-A'
    voice = VoiceSelectionParams(
        language_code=language_code,
        name=name,
        ssml_gender=SsmlVoiceGender.FEMALE)

    # Select the type of audio file you want returned
    audio_config = AudioConfig(
        audio_encoding=AudioEncoding.MP3,
        speaking_rate=speaking_rate)
    if LooseVersion(texttospeech_version) >= LooseVersion('2.0.0'):
        response = client.synthesize_speech(
            input=synthesis_input,
            voice=voice,
            audio_config=audio_config)
    else:
        response = client.synthesize_speech(
            synthesis_input, voice, audio_config)
    with open(args.output, 'wb') as out:
        # Write the response to the output file.
        out.write(response.audio_content)
